#include <iostream>
#include <cmath>
#include <cstdlib>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm>

using namespace std;

//Initialization Function
void in(double *u, double *un, double *v, double *vn, double *p, double *pn,double *b,int nx,int ny){
    int i, j;
    for(i = 0; i < nx ; i++){
        for(j = 0; j < ny ; j++){
            u[j*nx+i] = 0.0;
            un[j*nx+i] = 0.0;
            v[j*nx+i] = 0.0;
            vn[j*nx+i] = 0.0;
            p[j*nx+i] = 0.0;
            pn[j*nx+i] = 0.0;
            b[j*nx+i] = 0.0;
        }
    }
    for(i = 0 ; i < nx ;i++){
        u[(nx-1)*nx + i] = 1.0;
        un[(nx-1)*nx + i] = 1.0;
    }
cout<<"Initialization"<<endl;
}

//Build_up_b Function
__global__ void build_up_b(double *b, double *u, double *v, double rho, double dt, double dx, double dy, int nx, int ny){
    int i = threadIdx.x + blockIdx.x * blockDim.x ;
    int j = threadIdx.y + blockDim.y * blockIdx.y ;
    if(i > 0 && i < nx - 1 && j > 0 && j < ny - 1){
        b[j*nx+i] =
                   (rho * ( 1.0/dt * ((u[j*nx + i+1] - u[j*nx + i-1]) / (2 * dx) + (v[(j+1)*nx+i] - v[(j-1)*nx+i]) / (2 * dy)) - ((u[j*nx+i+1] - u[j*nx+i-1]) / (2*dx)) * ((u[j*nx+i+1] - u[j*nx+i-1]) / (2*dx)) - 2 * ((u[(j+1)*nx+i] - u[(j-1)*nx+i]) / (2*dy) * (v[j*nx+i+1] - v[j*nx + i-1])   / (2*dx)) - ((v[(j+1)*nx+i] - v[(j-1)*nx+i]) / (2*dy)) * ((v[(j+1)*nx+i] - v[(j-1)*nx+i]) / (2*dy)) ));
    }
    __syncthreads();
}

//Pressure_poisson Function
__global__ void pressure_poisson(double *p, double *pn, double *b, double dx, double dy, int nx, int ny, double rho){
    int i = threadIdx.x + blockIdx.x * blockDim.x ;
    int j = threadIdx.y + blockDim.y * blockIdx.y ;
    if(i > 0 && i < nx - 1 && j > 0 && j < ny - 1){
        p[j*nx+i] = (((pn[j*nx+i+1] + pn[j*nx+i-1]) * dy * dy + (pn[(j+1)*nx+i] + pn[(j-1)*nx+i]) * dx * dx)/ (2 * (dx * dx + dy * dy)) - dx * dx * dy * dy * b[j*nx+i] * rho / (2 * (dx *dx + dy * dy)));
    }
    __syncthreads();
}
__global__ void pressure_boundary(double *p, int nx, int ny){
    int i = threadIdx.x + blockIdx.x * blockDim.x ;
    int j = threadIdx.y + blockDim.y * blockIdx.y ;
    
    if(i == nx - 1 && j > 0 && j < ny - 1){
        p[j*nx+i] = p[j*nx+i-1]; 
    }
    
    else if(i == 0 && j > 0 && j < ny - 1){
        p[j*nx+i] = p[j*nx+i+1]; 
    }
    
    else if(j == 0 && i < nx ){
        p[j*nx+i] = p[(j+1)*nx+i]; 
    }
    else if(j == ny - 1 && i < nx){
        p[j*nx+i] = 0.0; 
    }
    __syncthreads();
}

//Cavity_flow Function
__global__ void cavity_flow(double *u, double *un,  double *v, double *vn,  double *p, double *pn, double *b, int nx , int ny, double dx, double dy, double dt, double nu, double rho){
    int i = threadIdx.x + blockIdx.x * blockDim.x ;
    int j = threadIdx.y + blockDim.y * blockIdx.y ;
    if(i > 0 && i < nx - 1 && j > 0 && j < ny - 1){
        u[j*nx+i] = ( un[j*nx+i] - un[j*nx+i] * dt / dx * (un[j*nx+i] - un[j*nx+i-1]) - vn[j*nx+i] * dt / dy * (un[j*nx+i] - un[(j-1)*nx+i]) - dt / (2 * rho * dx) * (p[j*nx+i+1] - p[j*nx+i-1]) + nu * (dt / (dx * dx) * (un[j*nx+i+1] - 2*un[j*nx+i] + un[j*nx+i-1]) + dt / (dy * dy) * (un[(j+1)*nx+i] - 2*un[j*nx+i] + un[(j-1)*nx+i])));
        v[j*nx+i] = ( vn[j*nx+i] - un[j*nx+i] * dt / dx * (vn[j*nx+i] - vn[j*nx+i-1]) - vn[j*nx+i] * dt / dy * (vn[j*nx+i] - vn[(j-1)*nx+i]) - dt / (2 * rho * dy) * (p[(j+1)*nx+i] - p[(j-1)*nx+i]) + nu * (dt / (dx * dx) * (vn[j*nx+i+1] - 2*vn[j*nx+i] + vn[j*nx+i-1]) + dt / (dy * dy) * (vn[(j+1)*nx+i] - 2*vn[j*nx+i] + vn[(j-1)*nx+i])));
    }
    __syncthreads();
}

__global__ void velocity_boundary(double *u, double *v, int nx , int ny){
    int i = threadIdx.x + blockIdx.x * blockDim.x ;
    int j = threadIdx.y + blockDim.y * blockIdx.y ;
    if(i == nx - 1 && j > 0 && j < ny - 1){
        u[j*nx+i] = 0.0; 
        v[j*nx+i] = 0.0; 
    }
    else if(i == 0 && j > 0 && j < ny - 1){
        u[j*nx+i] = 0.0; 
        v[j*nx+i] = 0.0; 
    }
    else if(j == 0 && i < nx ){
        u[j*nx+i] = 0.0;
        v[j*nx+i] = 0.0; 
    }
    else if(j == ny - 1 && i < nx){
        u[j*nx+i] = 1.0;
        v[j*nx+i] = 0.0;
    }
    __syncthreads();
}

//Main Function
int main(void){
  //Input set
  const int nx=41;   //mesh point in x coordinate
  const int ny=41;   //mesh point in y coordinate
  const int nt=700;  //number of timesteps
  const int nit=50;  //poisson equation iteration

  //Each point per distance
  const double dx=2.0/(nx-1);
  const double dy=2.0/(ny-1);

  //Navier-Stokes parameter
  const double rho=1;
  const double nu=0.1;
  const double dt=0.001;

  int size= nx*ny*sizeof(double);

  double *u, *un, *v, *vn, *p, *pn, *b;
  u  = (double*)malloc(size);
  un = (double*)malloc(size);
  v  = (double*)malloc(size);
  vn = (double*)malloc(size);
  p  = (double*)malloc(size);
  pn = (double*)malloc(size);
  b  = (double*)malloc(size);

  in(u,un,v,vn,p,pn,b,nx,ny);

  double *d_u,*d_un,*d_v,*d_vn,*d_p,*d_pn,*d_b;
  cudaMalloc((void**)&d_u,size);
  cudaMalloc((void**)&d_un,size);
  cudaMalloc((void**)&d_v,size);
  cudaMalloc((void**)&d_vn,size);
  cudaMalloc((void**)&d_p,size);
  cudaMalloc((void**)&d_pn,size);
  cudaMalloc((void**)&d_b,size);

  cudaMemcpy(d_u,u,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_un,un,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_v,v,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_vn,vn,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_p,p,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_pn,pn,size,cudaMemcpyHostToDevice);
  cudaMemcpy(d_b,b,size,cudaMemcpyHostToDevice);

  dim3 threadsPerBlock( 128, 1 );
  dim3 blockNumber( (nx + threadsPerBlock.x - 1) / threadsPerBlock.x,
  (ny + threadsPerBlock.y - 1) / threadsPerBlock.y);

  double *p_temp, *u_temp, *v_temp;

  for(int i=1;i<nt+1;i++){
    build_up_b<<<blockNumber,threadsPerBlock>>>(d_b, d_u, d_v, rho, dt, dx, dy, nx ,ny);
    cudaDeviceSynchronize();
    for(int j=0;j<nit;j++){
        pressure_poisson<<<blockNumber,threadsPerBlock>>>(d_p, d_pn, d_b, dx, dy, nx ,ny, rho);
        pressure_boundary<<<blockNumber,threadsPerBlock>>>(d_p, nx, ny);
        p_temp = d_pn; d_pn = d_p; d_p = p_temp;
    }
    cudaDeviceSynchronize();
    cavity_flow<<<blockNumber,threadsPerBlock>>>(d_u, d_un, d_v, d_vn, d_p, d_pn, d_b, nx, ny, dx, dy, dt, nu, rho);
    velocity_boundary<<<blockNumber,threadsPerBlock>>>(d_u, d_v, nx, ny);
    u_temp = d_un; d_un = d_u ; d_u = u_temp;
    v_temp = d_vn; d_vn = d_v ; d_v = v_temp;
    cudaDeviceSynchronize();
    cudaMemcpy(u ,  d_u ,  size, cudaMemcpyDeviceToHost);
    cudaMemcpy(v ,  d_v ,  size, cudaMemcpyDeviceToHost);
    cudaMemcpy(p ,  d_p,   size, cudaMemcpyDeviceToHost);
  }

cudaFree(d_u);
cudaFree(d_un);
cudaFree(d_v);
cudaFree(d_vn);
cudaFree(d_p);
cudaFree(d_pn);
cudaFree(d_b);

//Write in CSV
  ofstream outFile;
  outFile.open("data.csv",ios::out);
  for(int i=0;i<nx*ny;i++){
    outFile<<*(u+i)<<','<<*(v+i)<<','<<*(p+i)<<endl;
    }
  outFile.close();
  cout<<"Finish"<<endl;
}